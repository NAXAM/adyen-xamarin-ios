// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import Foundation;
@import SafariServices;
@import CoreGraphics;
@import PassKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Adyen",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum NavigationBarLargeTitleDisplayMode : NSInteger;
@class UIColor;
@class UIImage;
@class UIButton;

/// An object used to customize the appearance of the UI components provided by this SDK.
/// Note that <code>AppearanceConfiguration</code> is only used when the <code>CheckoutViewController</code> is first initialized. Changes to this object after it has been created are ignored.
SWIFT_CLASS("_TtC5Adyen23AppearanceConfiguration")
@interface AppearanceConfiguration : NSObject
/// Initializes the appearance configuration.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The preferred status bar style.
@property (nonatomic) UIStatusBarStyle preferredStatusBarStyle;
/// The attributes used for the navigation bar’s title.
@property (nonatomic, copy) NSDictionary<NSAttributedStringKey, id> * _Nullable navigationBarTitleTextAttributes;
/// The attributes used for the navigation bar’s large title. Only has an effect on iOS 11 and higher.
@property (nonatomic, copy) NSDictionary<NSAttributedStringKey, id> * _Nullable navigationBarLargeTitleTextAttributes;
/// The display mode for the large title in the navigation bar. Only has an effect on iOS 11 and higher.
@property (nonatomic) enum NavigationBarLargeTitleDisplayMode navigationBarLargeTitleDisplayMode;
/// The navigation bar’s tint color.
@property (nonatomic, strong) UIColor * _Nullable navigationBarTintColor;
/// The navigation bar’s background color.
@property (nonatomic, strong) UIColor * _Nullable navigationBarBackgroundColor;
/// A Boolean value indicating whether the navigation bar is translucent.
@property (nonatomic) BOOL isNavigationBarTranslucent;
/// The image of the cancel button in the navigation bar, or <code>nil</code> if a title should be used instead.
@property (nonatomic, strong) UIImage * _Nullable navigationBarCancelButtonImage;
/// The class to use for the checkout button.
/// The button’s title and enabled/disabled state will be managed by Adyen SDK.
/// When no type is specified, a default button is used.
@property (nonatomic) SWIFT_METATYPE(UIButton) _Nonnull checkoutButtonType;
/// The title of the checkout button.
/// If none provided, the amount in the format “Pay $x.xx” will be used.
@property (nonatomic, copy) NSString * _Nullable checkoutButtonTitle;
/// The color to tint the background of the Safari View Controller navigation bar and toolbar. Only has an effect on iOS 11 and higher.
@property (nonatomic, strong) UIColor * _Nullable safariBarTintColor;
/// The color to tint the the control buttons on Safari View Controller the navigation bar and the toolbar. Only has an effect on iOS 11 and higher.
@property (nonatomic, strong) UIColor * _Nullable safariControlTintColor;
/// The tint color for most buttons and actionable elements.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The background color of all view controllers.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Returns an instance of the default appearance configuration.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) AppearanceConfiguration * _Nonnull default_;)
+ (AppearanceConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
@end

/// Display modes for the large title in a navigation bar.
typedef SWIFT_ENUM(NSInteger, NavigationBarLargeTitleDisplayMode) {
/// Always display a large title.
  NavigationBarLargeTitleDisplayModeAlways = 0,
/// Only display a large title for the root view controller.
  NavigationBarLargeTitleDisplayModeRoot = 1,
/// Never display a large title.
  NavigationBarLargeTitleDisplayModeNever = 2,
};


@interface AppearanceConfiguration (SWIFT_EXTENSION(Adyen)) <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end








/// Instances conforming to this protocol provide access to the information that was stored for a payment method.
SWIFT_PROTOCOL("_TtP5Adyen12OneClickInfo_")
@protocol OneClickInfo
@end


/// Object that contains stored card info used to perform previous card payments.
SWIFT_CLASS("_TtC5Adyen16CardOneClickInfo")
@interface CardOneClickInfo : NSObject <OneClickInfo>
/// A shortened version of the card’s number.
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
/// The card’s holder name.
@property (nonatomic, readonly, copy) NSString * _Nonnull holderName;
/// The card’s expiry month.
@property (nonatomic, readonly) NSInteger expiryMonth;
/// The card’s expiry year.
@property (nonatomic, readonly) NSInteger expiryYear;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol CheckoutViewControllerDelegateBridgeDelegate;
@class NSCoder;
@protocol CheckoutViewControllerCardScanDelegate;
@class UINavigationItem;
@class PaymentRequest;
@class PaymentMethod;
@class PaymentDetails;
@class SFSafariViewController;

/// The starting point for <a href="https://docs.adyen.com/developers/payments/accepting-payments/in-app-integration">Quick integration</a>. Initialize and present this view controller in your app to start the payment flow. If you don’t embed the <code>CheckoutViewController</code> in a <code>UINavigationController</code> instance, a new one will be created automatically.
/// Communication is performed through a <code>delegate</code> object that conforms to <code>CheckoutViewControllerDelegate</code> and a <code>cardScanDelegate</code> object that conforms to <code>CheckoutViewControllerCardScanDelegate</code>.
/// Providing a <code>delegate</code> is required during initialization. This object is used to request and provide data during the payment flow process.
/// Providing a <code>cardScanDelegate</code> is optional. This object is used when integrating card scanning functionality. The Adyen SDK does not perform card scanning, but allows you to integrate your own or third-party scanning behaviour. Through this object, you can let <code>CheckoutViewController</code> know whether or not a card scan button should be shown, receive a callback when this button is tapped, and provide scan results back to the SDK through a completion block.
SWIFT_CLASS("_TtC5Adyen22CheckoutViewController")
@interface CheckoutViewController : UIViewController <SFSafariViewControllerDelegate>
/// Initializes the Checkout View Controller.
/// \param delegate The delegate to receive the checkout view controller’s events.
///
/// \param appearanceConfiguration The configuration for customizing the checkout view controller’s appearance.
///
- (nonnull instancetype)initWithDelegate:(id <CheckoutViewControllerDelegateBridgeDelegate> _Nonnull)delegate appearanceConfiguration:(AppearanceConfiguration * _Nonnull)appearanceConfiguration OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The delegate for card scanning functionality for card payments.
@property (nonatomic, weak) id <CheckoutViewControllerCardScanDelegate> _Nullable cardScanDelegate;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillLayoutSubviews;
/// :nodoc:
@property (nonatomic, readonly, strong) UINavigationItem * _Nonnull navigationItem;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// :nodoc:
@property (nonatomic, readonly) BOOL shouldAutorotate;
/// :nodoc:
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// :nodoc:
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresPaymentDataForToken:(NSString * _Nonnull)token completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// :nodoc:
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresPaymentMethodFrom:(NSArray<PaymentMethod *> * _Nullable)preferredMethods available:(NSArray<PaymentMethod *> * _Nonnull)availableMethods completion:(void (^ _Nonnull)(PaymentMethod * _Nonnull))completion;
/// :nodoc:
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresReturnURLFrom:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSURL * _Nonnull))completion;
/// :nodoc:
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresPaymentDetails:(PaymentDetails * _Nonnull)details completion:(void (^ _Nonnull)(PaymentDetails * _Nonnull))completion;
/// :nodoc:
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// The <code>CheckoutViewControllerCardScanDelegate</code> protocol defines methods that the <code>cardScanDelegate</code> of <code>CheckoutViewController</code> should implement to enable card scanning functionality for card payment methods.
/// The Adyen SDK does not provide card scanning functionality, but allows you to connect your own or third-party card scanning flows by conforming to this protocol. By providing a <code>cardScanDelegate</code> object that conforms to <code>CheckoutViewControllerCardScanDelegate</code>, you will be able to specify whether or not a card scan button should be shown, receive a callback when this button is tapped, and provide scan results back to the SDK through a completion block.
SWIFT_PROTOCOL("_TtP5Adyen38CheckoutViewControllerCardScanDelegate_")
@protocol CheckoutViewControllerCardScanDelegate
/// Invoked when the card payment method is selected.
/// \param checkoutViewController The checkout view controller that started the payment flow.
///
///
/// returns:
/// A boolean value indicating whether or not a card scan button should be present, so that a card scanning SDK can be integrated.
- (BOOL)shouldShowCardScanButtonFor:(CheckoutViewController * _Nonnull)checkoutViewController SWIFT_WARN_UNUSED_RESULT;
/// Invoked when the card scan button is tapped.
/// This is the entry point for integrating the card scanning SDK.
/// \param checkoutViewController The checkout view controller that started the payment flow.
///
/// \param completion The handler to invoke once card number and expiry date have been scanned.
/// The <code>CardScanCompletion</code> handler expects card number, expiry date (MMYY) and CVC as optional
/// numerical strings with no spaces. Illegal characters are stripped out of all strings.
///
- (void)scanCardFor:(CheckoutViewController * _Nonnull)checkoutViewController completion:(void (^ _Nonnull)(NSString * _Nullable number, NSString * _Nullable expiryDate, NSString * _Nullable cvc))completion;
@end

@class Payment;
@class NSError;

SWIFT_PROTOCOL("_TtP5Adyen44CheckoutViewControllerDelegateBridgeDelegate_")
@protocol CheckoutViewControllerDelegateBridgeDelegate
/// Invoked when the payment flow has started and payment data is requested from the merchant server.
/// \param controller The checkout view controller that has started the payment flow.
///
/// \param token The token assigned to the payment flow.
///
/// \param completion The completion handler to invoke when the payment data is retrieved from the merchant server.
///
- (void)checkoutViewController:(CheckoutViewController * _Nonnull)controller requiresPaymentDataForToken:(NSString * _Nonnull)token completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Invoked when the redirection to a URL has been made. The given completion handler should be invoked when the user returns to the application through a URL.
/// \param controller The checkout view controller which requested the return from a URL redirection.
///
/// \param completion The completion handler to invoke when the user returns to the application through a URL.
///
- (void)checkoutViewController:(CheckoutViewController * _Nonnull)controller requiresReturnURL:(void (^ _Nonnull)(NSURL * _Nonnull))completion;
/// Invoked when the payment flow has finished.
/// \param controller The checkout view controller that finished the payment flow.
///
/// \param result The payment result.
///
- (void)checkoutViewController:(CheckoutViewController * _Nonnull)controller didFinishWith:(Payment * _Nullable)result error:(NSError * _Nullable)error;
@end


/// A text field object designed for the entry of an IBAN value. This field formats and validates the IBAN in real time.
SWIFT_CLASS("_TtC5Adyen13IBANTextField")
@interface IBANTextField : UITextField
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class InputSelectItem;

/// An object describing a payment detail required to process the transaction.
/// The detail has a <code>type</code> (<code>InputType</code>). If <code>type</code> is <code>.select</code>, selection should be made from list of <code>InputSelectItem</code>.
/// The detail value can be set as a string (<code>stringValue</code>) or a bool value (<code>boolValue</code>).
SWIFT_CLASS("_TtC5Adyen11InputDetail")
@interface InputDetail : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull inputType;
/// Whether or not the detail is optional.
@property (nonatomic, readonly) BOOL optional;
/// An array of <code>InputSelectItem</code>. Only be available if <code>type</code> is <code>.select</code>.
@property (nonatomic, readonly, copy) NSArray<InputSelectItem *> * _Nullable items;
/// An array of input details nested in the receiver.
@property (nonatomic, readonly, copy) NSArray<InputDetail *> * _Nullable inputDetails;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An object representing a selectable item used in <code>InputDetail</code> with <code>select</code> type.
SWIFT_CLASS("_TtC5Adyen15InputSelectItem")
@interface InputSelectItem : NSObject
/// Identifier of an item. Upon selection, the value of this property should be assigned to the <code>value</code> property of the <code>InputDetail</code> object.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Display name of an item.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Optional URL for the icon of an item.
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





/// Object that contains stored info used to perform previous PayPal payments.
SWIFT_CLASS("_TtC5Adyen18PayPalOneClickInfo")
@interface PayPalOneClickInfo : NSObject <OneClickInfo>
/// The email address of the PayPal account.
@property (nonatomic, readonly, copy) NSString * _Nonnull emailAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An object that represents a payment that has been completed by the user. The result of the payment can be retrieved via the <code>status</code> property.
SWIFT_CLASS("_TtC5Adyen7Payment")
@interface Payment : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull paymentStatus;
/// The method that was used to complete the payment.
@property (nonatomic, readonly, strong) PaymentMethod * _Nonnull method;
/// The payload as returned from the server.
@property (nonatomic, readonly, copy) NSString * _Nonnull payload;
/// The amount of the payment, in minor units.
@property (nonatomic, readonly) NSInteger amount;
/// The code of the currency for the payment amount.
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyCode;
/// The reference of the merchant.
@property (nonatomic, readonly, copy) NSString * _Nonnull merchantReference;
/// The reference of the shopper.
@property (nonatomic, readonly, copy) NSString * _Nullable shopperReference;
/// The country code of the shopper.
@property (nonatomic, readonly, copy) NSString * _Nonnull shopperCountryCode;
/// The locale identifier of the shopper.
@property (nonatomic, readonly, copy) NSString * _Nullable shopperLocaleIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An object that holds the list of <code>InputDetail</code> items required for to process a transaction.
SWIFT_CLASS("_TtC5Adyen14PaymentDetails")
@interface PaymentDetails : NSObject
/// List of <code>InputDetail</code>.
@property (nonatomic, copy) NSArray<InputDetail *> * _Nonnull list;
/// Update the detail defined by a given <code>key</code> with the string <code>value</code> provided.
- (void)setDetailWithValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




@interface PaymentDetails (SWIFT_EXTENSION(Adyen))
/// Fills details for the Apple Pay transaction.
- (void)fillApplePayWithToken:(NSString * _Nonnull)token;
@end


@interface PaymentDetails (SWIFT_EXTENSION(Adyen))
/// Fills details for the iDEAL transaction.
- (void)fillIdealWithIssuerIdentifier:(NSString * _Nonnull)issuerIdentifier;
@end


@interface PaymentDetails (SWIFT_EXTENSION(Adyen))
/// Fill details for the SEPA transaction.
- (void)fillSepaWithName:(NSString * _Nonnull)name iban:(NSString * _Nonnull)iban;
@end


@interface PaymentDetails (SWIFT_EXTENSION(Adyen))
/// Fills details for the card transaction with CVC.
- (void)fillCardWithCvc:(NSString * _Nonnull)cvc;
/// Fills installments selection for the card transaction.
- (void)fillCardWithInstallmentPlanIdentifier:(NSString * _Nonnull)installmentPlanIdentifier;
@end


/// An object representing a payment method used to complete a payment.
SWIFT_CLASS("_TtC5Adyen13PaymentMethod")
@interface PaymentMethod : NSObject
/// The name of the payment method.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The payment method type.
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// A URL to the logo of the payment method.
@property (nonatomic, readonly, copy) NSURL * _Nullable logoURL;
/// Members of the payment method (only applicable when the receiver is a group).
@property (nonatomic, readonly, copy) NSArray<PaymentMethod *> * _Nullable members;
/// A Boolean value indicating whether the payment method is a one-click payment method, which means that it can be easily completed by the user.
@property (nonatomic, readonly) BOOL isOneClick;
/// The information that was stored for this payment payment method, or <code>nil</code> if this is not a one-click payment method.
@property (nonatomic, readonly, strong) id <OneClickInfo> _Nullable oneClickInfo;
/// The input details that should be filled in to complete the payment.
@property (nonatomic, readonly, copy) NSArray<InputDetail *> * _Nullable inputDetails;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end







@protocol PaymentRequestDelegateBridgeDelegate;

/// The starting point for <a href="https://docs.adyen.com/developers/payments/accepting-payments/in-app-integration">Custom Integration</a>.
SWIFT_CLASS("_TtC5Adyen14PaymentRequest")
@interface PaymentRequest : NSObject
/// Creates a <code>PaymentRequest</code> object and initialises it with a provided delegate.
/// \param delegate An object that implements <code>PaymentRequestDelegate</code>.
///
///
/// returns:
/// An initialised instance of the payment request.
- (nonnull instancetype)initWithDelegate:(id <PaymentRequestDelegateBridgeDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// The selected payment method.
@property (nonatomic, readonly, strong) PaymentMethod * _Nullable paymentMethod;
/// Payment currency.
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
/// Payment reference.
@property (nonatomic, readonly, copy) NSString * _Nullable reference;
/// Payment country code.
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// Shopper locale.
@property (nonatomic, readonly, copy) NSString * _Nullable shopperLocale;
/// Shopper reference.
@property (nonatomic, readonly, copy) NSString * _Nullable shopperReference;
/// Generation time. Used for generating a token for card payments.
@property (nonatomic, readonly, copy) NSString * _Nullable generationTime;
/// Public key. Used for generating a token for card payments.
@property (nonatomic, readonly, copy) NSString * _Nullable publicKey;
/// Starts the payment request.
- (void)start;
/// Permanently deletes payment method from shopper’s preferred payment options.
- (void)deletePreferredWithPaymentMethod:(PaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Cancels the payment request.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP5Adyen36PaymentRequestDelegateBridgeDelegate_")
@protocol PaymentRequestDelegateBridgeDelegate
/// Given the <code>PaymentRequest</code> that started the payment flow and <code>token</code>, waits for data from merchant server to be passed via <code>completion</code>.
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresPaymentDataForToken:(NSString * _Nonnull)token completion:(void (^ _Nonnull)(NSData * _Nonnull))completion;
/// Given a list of <code>PaymentMethod</code> (available and preferred) waits for the selection via <code>completion</code>.
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresPaymentMethodFrom:(NSArray<PaymentMethod *> * _Nullable)preferredMethods available:(NSArray<PaymentMethod *> * _Nonnull)availableMethods completion:(void (^ _Nonnull)(PaymentMethod * _Nonnull))completion;
/// This method is called when a URL redirection needs to be executed.
/// <code>url</code> can be a universal link, an app URL, or a standard URL that is to be opened in Safari or <code>SFSafariViewController</code>
/// Care should be taken when handling an app URL, as this type of URL will not have the http/https scheme, and will cause a crash if opened in <code>SFSafariViewController</code>.
/// After the process is completed, the <code>completion</code> for the given URL must be called.
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresReturnURLFrom:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSURL * _Nonnull))completion;
/// This method is called when input is needed for completing the transation. The filled <code>PaymentDetails</code> should be sent via <code>completion</code>.
- (void)paymentRequest:(PaymentRequest * _Nonnull)request requiresPaymentDetails:(PaymentDetails * _Nonnull)details completion:(void (^ _Nonnull)(PaymentDetails * _Nonnull))completion;
/// This method is called when the payment flow is finished.
- (void)paymentRequest:(PaymentRequest * _Nonnull)request didFinishWith:(Payment * _Nullable)result error:(NSError * _Nullable)error;
@end





















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
